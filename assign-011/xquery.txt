Query A

for $person in fn:doc ('xmlshop.xml')/Shop/Persons/Person
let $albums := $person/Albums/count(*)
let $films := $person/Films/count(*)
let $books := $person/Books/count(*)
let $sum := sum(($albums, $films, $books))
return ($person,$sum)

Query B

let $nbPerson := count(fn:doc ('xmlshop.xml')//Shop/Persons/Person)
let $person := fn:doc ('xmlshop.xml')/Shop/Persons/Person
let $albums := $person/Albums/count(*)
let $films := $person/Films/count(*)
let $books := $person/Books/count(*)
let $sum := sum(($albums, $films, $books))
return ($sum div $nbPerson, $sum, $nbPerson)

Query C

for $actor in fn:distinct-values(fn:doc ('xmlshop.xml')/Shop/DVDs/DVD/Actors/Actor)
let $director := fn:doc ('xmlshop.xml')/Shop/DVDs/DVD/Director
where $actor = $director
return ($actor)

Query D
//Works but only in our case so it's not what's expected
let $dvdComp := fn:distinct-values(fn:doc('xmlshop.xml')/Shop/DVDs/DVD/Distributor)
for $cdComp in fn:distinct-values(fn:doc('xmlshop.xml')/Shop/CDs/CD/Distributor)
where $cdComp != $dvdComp[1]
return fn:distinct-values($cdComp)

Query E

for $cd in fn:doc('xmlshop.xml')/Shop/CDs/CD
let $company := fn:doc('xmlshop.xml')//Companies/Company[@ID = $cd/Distributor]
where fn:exists($company/GermanAddress)
return $cd//Member

Query F

for $genre in fn:distinct-values(fn:doc('xmlshop.xml')//CD/Genre)
let $avg := avg(fn:doc('xmlshop.xml')//CD[Genre = $genre]//Price)
return concat($genre,' ', $avg)

Query G

for $person in fn:doc('xmlshop.xml')//Persons/Person
let $cds := sum(fn:doc('xmlshop.xml')//CD[@ID = $person//Album]//Price)
let $dvds := sum(fn:doc('xmlshop.xml')//DVD[@ID = $person//Film]//Price)
let $books := sum(fn:doc('xmlshop.xml')//Book[@ID = $person//Book]//Price)
let $sum := sum(($cds, $dvds, $books))
order by $sum descending, $person/Surname ascending
return concat($sum, ' ', $person//Surname/text())

Query H

//easy version without product detail
let $price := fn:doc('xmlshop.xml')//Price
return min($price)

//complete version

Query I

let $type := 'cd'

let $minbook := min(fn:doc('xmlshop.xml')//Books//Price)
let $mincd := min(fn:doc('xmlshop.xml')//CDs//Price)
let $mindvd := min(fn:doc('xmlshop.xml')//DVDs//Price)
return
if ($type = 'book')
then concat($type, ' ', $minbook)
else if ($type = 'cd')
then concat($type, ' ', $mincd)
else if ($type = 'dvd')
then concat($type, ' ', $mindvd)
else 'null'

Query J

for $person in fn:doc('xmlshop.xml')//Persons/Person
let $bookcount := $person/Books/count(*)

return
if ($bookcount > 1)
then (concat($person/Forename, " ", $person/Surname), $person/Books)
else ()

Query K

<QueryResult>{
for $person in fn:doc('xmlshop.xml')//Persons/Person
for $bookID at $i in $person//Book
let $bookData:= fn:doc('xmlshop.xml')//Books/Book[@ID = $bookID]
let $bookcount := $person/Books/count(*)

return
if ($bookcount > 1)
then (<Position>{$bookData//Title}{$bookData//Price}</Position>)
else ()}
</QueryResult>

Query L

<QueryResult>{
for $person in fn:doc('xmlshop.xml')//Persons/Person
for $bookID at $i in $person//Book
let $bookData:= fn:doc('xmlshop.xml')//Books/Book[@ID = $bookID]
let $bookcount := $person/Books/count(*)
order by $bookData/Title descending
return
if ($bookcount > 1)
then (<Position>{$bookData//Title}{$bookData//Price}</Position>)
else ()}
</QueryResult>

Query M

<QueryResult>{
let $sorted := for $person in fn:doc('xmlshop.xml')//Persons/Person
for $bookID at $i in $person//Book
let $bookData:= fn:doc('xmlshop.xml')//Books/Book[@ID = $bookID]
let $bookcount := $person/Books/count(*)
order by $bookData/Title descending
return
if ($bookcount > 1)
then ($bookData)
else ()

for $book at $i in $sorted
return <Position ID='{$i}'>{$book//Title}{$book//Price}</Position>
}</QueryResult>

Query N

let $sorted := for $person in fn:doc('xmlshop.xml')//Persons/Person
for $bookID at $i in $person//Book
let $bookData:= fn:doc('xmlshop.xml')//Books/Book[@ID = $bookID]
let $bookcount := $person/Books/count(*)
order by $bookData/Title descending
return
if ($bookcount > 1)
then ($bookData)
else ()

let $total := <PriceTotal>{sum($sorted//Price)}</PriceTotal>

let $numbered := for $book at $i in $sorted
return <Position ID='{$i}'>{$book//Title}{$book//Price}</Position>

return <QueryResult>{
let $final := ($numbered, $total)
return $final
}</QueryResult>

Query O

let $sorted := for $person in fn:doc('xmlshop.xml')//Persons/Person
for $bookID at $i in $person//Book
let $bookData:= fn:doc('xmlshop.xml')//Books/Book[@ID = $bookID]
let $bookcount := $person/Books/count(*)
order by $bookData/Title descending
return
if ($bookcount > 1)
then ($bookData)
else ()

let $numbered := for $book at $i in $sorted
return
if($book//Price > 30)
then (<Position ID='{$i}'>{$book//Title}<Price>{$book//Price*0.9}</Price></Position>)
else (<Position ID='{$i}'>{$book//Title}{$book//Price}</Position>)

let $total := <PriceTotal>{sum($numbered//Price)}</PriceTotal>

return <QueryResult>{
let $final := ($numbered, $total)
return $final
}</QueryResult>


